Write a Java program to perform encryption and decryption using the 
following algorithms: 
 a) Ceaser Cipher b) Substitution Cipher c) Hill Cipher

a) Ceaser Cipher

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
class CeaserCipher
{
 static Scanner sc=new Scanner(System.in);
 static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 public static void main (String[] args) throws IOException
 {
 System.out.print("Enter any String: ");
 String str = br.readLine();
 System.out.print("\nEnter the Key: ");
 int key = sc.nextInt();
 String encrypted = encrypt(str, key);
 System.out.println("\nEncrypted String is: " +encrypted);
 String decrypted = decrypt(encrypted, key);
 System.out.println("\nDecrypted String is: "+decrypted);
 System.out.println("\n");
 }
 public static String encrypt(String str, int key)
 {
 String encrypted = "";
 for(int i = 0; i < str.length(); i++)
{
 int c = str.charAt(i);
 if(Character.isUpperCase(c))
 {
 c = c + (key % 26);
 if (c > 'Z')
 c = c - 26;
 }
 else if (Character.isLowerCase(c))
 {
 c = c + (key % 26);
 if (c > 'z')
 c = c - 26;
 }
 encrypted += (char) c;
 }
 return encrypted;
 }
 public static String decrypt(String str, int key)
 {
 String decrypted = "";
 for(int i = 0; i < str.length(); i++)
 {
 int c = str.charAt(i);
 if (Character.isUpperCase(c))
 {
 c = c - (key % 26);
 if (c < 'A')
 c = c + 26;
 }
 else if (Character.isLowerCase(c))
 {
 c = c - (key % 26);
 if (c < 'a')
 c = c + 26;
 }
 decrypted += (char) c;
 }
 return decrypted;
 }
}


b) Substitution Cipher

import java.io.*; 
import java.util.*; 
class SubstitutionCipher 
{ 
 static Scanner sc = new Scanner(System.in); 
 static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
 public static void main(String[] args) throws IOException 
 { 

 String a = "abcdefghijklmnopqrstuvwxyz"; 
 String b = "zyxwvutsrqponmlkjihgfedcba"; 
 System.out.print("Enter any string: ");
 String str = br.readLine(); 
 String decrypt = ""; 
 String encrypt = ""; 
 char c; 
 for(int i=0;i<str.length();i++) 
 { 
 c = str.charAt(i); 
 int j = a.indexOf(c); 
 decrypt = decrypt+b.charAt(j); 
 } 
 System.out.println("The encrypted data is: " +decrypt); 
 for(int i=0;i<str.length();i++) 
 { 
 c = str.charAt(i); 
 int j = a.indexOf(c); 
 encrypt = encrypt+a.charAt(j); 
 } 
 System.out.println("The decrypted data is: " +encrypt); 
 } 
}


c) Hill Cipher

import java.io.*; 
import java.util.*; 
import java.io.*; 
public class HillCipher 
{ 
 static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
 static Scanner sc = new Scanner(System.in); 
 static int n=sc.nextInt(); 
 static float[][] decrypt = new float[n][1]; 
 static float[][] a = new float[n][n]; 
 static float[][] b = new float[n][n]; 
 static float[][] mes = new float[n][1]; 
 static float[][] res = new float[n][1]; 
 
 public static void main(String[] args) throws IOException 
 { 
  getkeymes(); 
  for(int i=0;i<n;i++) 
  for(int j=0;j<1;j++) 
  for(int k=0;k<n;k++) 
  { 
   res[i][j]=res[i][j]+a[i][k]*mes[k][j]; 
  } 
  System.out.print("\nEncrypted string is :"); 
  for(int i=0;i<n;i++) 
  { 
   System.out.print((char)(res[i][0]%26+97)); 
   res[i][0]=res[i][0]; 
  } 
  inverse(); 
  for(int i=0;i<n;i++) 
  for(int j=0;j<1;j++) 
  for(int k=0;k<n;k++) 
  { 
   decrypt[i][j] = decrypt[i][j]+b[i][k]*res[k][j]; 
  } 
  System.out.print("\nDecrypted string is : "); 
  for(int i=0;i<n;i++) 
  { 
    System.out.print((char)(decrypt[i][0]%26+97)); 
  } 
  System.out.print("\n"); 
 } 
 
 public static void getkeymes() throws IOException 
 { 
  System.out.println("Enter size of string :"); 
  n=sc.nextInt(); 
  System.out.println("Enter "+n+"x"+n+" matrix for key (It should be inversible): "); 
  for(int i=0;i<n;i++) 
  for(int j=0;j<n;j++) 
  a[i][j] = sc.nextFloat(); 
  System.out.print("\nEnter a "+n+" letter string: "); 
  String msg = br.readLine(); 
  for(int i=0;i<n;i++) 
  mes[i][0] = msg.charAt(i)-97; 
 }
 public static void inverse() 
 { 
  float p,q; 
  float[][] c = a; 
  for(int i=0;i<n;i++) 
  for(int j=0;j<n;j++) 
  { 
   //a[i][j]=sc.nextFloat(); 
   if(i==j) 
   b[i][j]=1; 
   else 
   b[i][j]=0; 
  } 
  for(int k=0;k<n;k++) 
  { 
   for(int i=0;i<n;i++) 
   { 
    p = c[i][k]; 
    q = c[k][k]; 
    for(int j=0;j<n;j++) 
    { 
     if(i!=k) 
     { 
      c[i][j] = c[i][j]*q-p*c[k][j]; 
      b[i][j] = b[i][j]*q-p*b[k][j]; 
     } 
    } 
   } 
  } 
  for(int i=0;i<n;i++) 
  for(int j=0;j<n;j++) 
  { 
   b[i][j] = b[i][j]/c[i][i]; 
  } 
  System.out.println(""); 
  System.out.println("\nInverse Matrix is : "); 
  for(int i=0;i<n;i++)
  { 
   for(int j=0;j<n;j++)
   System.out.print(b[i][j] + " "); 
   System.out.print("\n"); 
  } 
 } 
}
